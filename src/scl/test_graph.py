
from .graph import Graph, strongconnect

def test_graph_mixed_ops():

    g = Graph[int]()

    assert(not g.has_vertex(1))
    assert(not g.has_vertex(2))
    assert(not g.has_vertex(3))
    assert(not g.has_vertex(4))
    assert(not g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.count_vertices() == 0)
    assert(g.count_vertices() == 0)

    g.add_edge(1, 1)
    assert(g.has_vertex(1))
    assert(not g.has_vertex(2))
    assert(not g.has_vertex(3))
    assert(not g.has_vertex(4))
    assert(not g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.count_vertices() == 1)
    assert(g.count_edges() == 1)
    assert(g.has_edge(1, 1))
    assert(not g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(not g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))

    g.add_edge(1, 1)
    assert(g.has_vertex(1))
    assert(not g.has_vertex(2))
    assert(not g.has_vertex(3))
    assert(not g.has_vertex(4))
    assert(not g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.count_vertices() == 1)
    assert(g.count_edges() == 1)
    assert(g.has_edge(1, 1))
    assert(not g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(not g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))

    g.add_edge(1, 2)
    assert(g.has_vertex(1))
    assert(g.has_vertex(2))
    assert(not g.has_vertex(3))
    assert(not g.has_vertex(4))
    assert(not g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.count_vertices() == 2)
    assert(g.count_edges() == 2)
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(not g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))

    g.add_edge(3, 4)
    assert(g.has_vertex(1))
    assert(g.has_vertex(2))
    assert(g.has_vertex(3))
    assert(g.has_vertex(4))
    assert(not g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.count_vertices() == 4)
    assert(g.count_edges() == 3)
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))

    g.add_edge(4, 4)
    assert(g.count_vertices() == 4)
    assert(g.count_edges() == 4)
    assert(g.has_vertex(1))
    assert(g.has_vertex(2))
    assert(g.has_vertex(3))
    assert(g.has_vertex(4))
    assert(not g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))
    assert(g.has_edge(4, 4))
    assert(not g.has_edge(4, 5))
    assert(not g.has_edge(5, 5))

    g.add_edge(5, 4)
    assert(g.count_vertices() == 5)
    assert(g.count_edges() == 5)
    assert(g.has_vertex(1))
    assert(g.has_vertex(2))
    assert(g.has_vertex(3))
    assert(g.has_vertex(4))
    assert(g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))
    assert(g.has_edge(4, 4))
    assert(not g.has_edge(4, 5))
    assert(g.has_edge(5, 4))
    assert(not g.has_edge(5, 5))

    g.add_edge(5, 5)
    assert(g.count_vertices() == 5)
    assert(g.count_edges() == 6)
    assert(g.has_vertex(1))
    assert(g.has_vertex(2))
    assert(g.has_vertex(3))
    assert(g.has_vertex(4))
    assert(g.has_vertex(5))
    assert(not g.has_vertex(6))
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))
    assert(g.has_edge(4, 4))
    assert(not g.has_edge(4, 5))
    assert(g.has_edge(5, 4))
    assert(g.has_edge(5, 5))

    g.remove_edge(5, 5)
    assert(g.count_edges() == 5)
    assert(g.count_vertices() == 5)
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))
    assert(g.has_edge(4, 4))
    assert(not g.has_edge(4, 5))
    assert(g.has_edge(5, 4))
    assert(not g.has_edge(5, 5))

    g.remove_edge(5, 4)
    assert(g.count_edges() == 4)
    assert(g.count_vertices() == 5)
    assert(g.has_edge(1, 1))
    assert(g.has_edge(1, 2))
    assert(not g.has_edge(1, 3))
    assert(not g.has_edge(2, 2))
    assert(not g.has_edge(2, 3))
    assert(g.has_edge(3, 4))
    assert(not g.has_edge(4, 3))
    assert(g.has_edge(4, 4))
    assert(not g.has_edge(4, 5))
    assert(not g.has_edge(5, 4))
    assert(not g.has_edge(5, 5))

def test_outgoing():
    g = Graph[int]()
    g.add_edge(1,2)
    g.add_edge(2,3)
    g.add_edge(3,1)
    g.add_edge(3,5)

    l1 = set(g.get_out_vertices(1))
    assert(len(l1) == 1)
    assert(2 in l1)

    l2 = set(g.get_out_vertices(2))
    assert(len(l2) == 1)
    assert(3 in l2)

    l3 = set(g.get_out_vertices(3))
    assert(len(l3) == 2)
    assert(1 in l3)
    assert(5 in l3)

    l4 = set(g.get_out_vertices(5))
    assert(len(l4) == 0)

def test_remove_vertex():

    g = Graph[int]()
    g.add_edge(1,2)
    g.add_edge(1,3)
    g.add_edge(4,1)
    g.add_edge(2,4)
    g.add_edge(5,4)

    g.remove_vertex(1)

    assert(g.count_vertices() == 4)
    assert(g.count_edges() == 2)
    assert(not g.has_vertex(1))
    assert(g.has_vertex(2))
    assert(g.has_vertex(3))
    assert(g.has_vertex(4))
    assert(g.has_vertex(5))
    assert(g.has_vertex(5))
    assert(not g.has_vertex(6))

def test_strongconnect_0():
    g = Graph[int]()
    g.add_edge(1, 2)
    res = list(tuple(sorted(scc)) for scc in strongconnect(g))
    res.sort()
    assert(len(res) == 2)
    assert(len(res[0]) == 1)
    assert(1 in res[0])
    assert(len(res[0]) == 1)
    assert(2 in res[1])

def test_strongconnect_1():
    g = Graph[int]()
    g.add_edge(1, 2)
    g.add_edge(2, 1)
    res = list(strongconnect(g))
    assert(len(res) == 1)
    assert(1 in res[0])
    assert(2 in res[0])

def test_strongconnect_2():
    g = Graph[int]()
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    g.add_edge(3, 1)
    g.add_edge(3, 4)
    g.add_edge(4, 5)
    g.add_edge(5, 1)
    g.add_edge(5, 6)
    g.add_edge(6, 2)
    g.add_edge(6, 7)
    res = list(tuple(sorted(scc)) for scc in strongconnect(g))
    res.sort()
    assert(len(res) == 2)
    assert(len(res[0]) == 6)
    assert(1 in res[0])
    assert(2 in res[0])
    assert(3 in res[0])
    assert(4 in res[0])
    assert(5 in res[0])
    assert(6 in res[0])
    assert(len(res[1]) == 1)
    assert(7 in res[1])
